name: 4. Create GitHub Release

on:
  workflow_dispatch:
    inputs:
      project_version:
        description: "Project version to use for the release"
        required: true
        type: string
  workflow_call:
    inputs:
      project_version:
        description: "Project version to use for the release"
        required: true
        type: string
    outputs:
      release_exists:
        description: "Boolean indicating if the release already exists"
        value: ${{ jobs.release.outputs.release_exists }}

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      release_exists: ${{ steps.check_release.outputs.release_exists }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check GH Tag
        id: check_release
        run: |
          url="${{ github.api_url }}/repos/${{ github.repository }}/releases/tags/v${{ inputs.project_version }}"
          response=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${{ secrets.GIT_TOKEN }}" "$url")
          if [ "$response" -eq 200 ]; then
            echo "Release tag v${{ inputs.project_version }} already exists."
            echo "release_exists=true" >> $GITHUB_ENV
            echo "release_exists=true" >> $GITHUB_OUTPUT
          else
            echo "Release tag v${{ inputs.project_version }} does not exist."
            echo "release_exists=false" >> $GITHUB_ENV
            echo "release_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Get Release Notes
        if: env.release_exists == 'false'
        run: |
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git fetch --prune --unshallow
          git fetch --tags
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^)
          echo "::notice title=Previous Release::${PREV_TAG}"
          echo "::notice title=Current Release::v${{ inputs.project_version }}"
          repository="${{ github.server_url }}/${{ github.repository }}"
          git log "${PREV_TAG}..HEAD" --pretty=format:"- [%h](${repository}/commit/%H) %s" --no-merges > release_notes.txt
          cat release_notes.txt

      - name: Create Release
        if: env.release_exists == 'false'
        run: |
          gh release create "v${{ inputs.project_version }}" \
            --title "v${{ inputs.project_version }}" \
            --notes-file release_notes.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
